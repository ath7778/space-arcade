/* particles.min.js v1.0.0 - A lightweight JavaScript library for creating particles */
class Particles{constructor(t){this.options={selector:".particles-container",maxParticles:100,sizeMin:1,sizeMax:3,speed:.5,color:"#4CAF50",opacity:.7,linkColor:"#4CAF50",linkOpacity:.3,linkDistance:150,...t},this.particles=[],this.canvas=null,this.ctx=null,this.width=0,this.height=0,this.devicePixelRatio=window.devicePixelRatio||1,this.init()}init(){const t=document.querySelector(this.options.selector);if(!t)return console.error(`Particles: Element with selector "${this.options.selector}" not found.`);this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),t.appendChild(this.canvas),window.addEventListener("resize",()=>this.resize()),this.resize(),this.createParticles(),this.animate()}resize(){const t=this.canvas.parentElement.getBoundingClientRect();this.width=t.width,this.height=t.height,this.canvas.width=this.width*this.devicePixelRatio,this.canvas.height=this.height*this.devicePixelRatio,this.canvas.style.width=`${this.width}px`,this.canvas.style.height=`${this.height}px`,this.ctx.scale(this.devicePixelRatio,this.devicePixelRatio)}createParticles(){this.particles=[];for(let t=0;t<this.options.maxParticles;t++)this.particles.push({x:Math.random()*this.width,y:Math.random()*this.height,vx:(Math.random()-.5)*this.options.speed,vy:(Math.random()-.5)*this.options.speed,size:Math.random()*(this.options.sizeMax-this.options.sizeMin)+this.options.sizeMin})}animate(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.updateParticles(),this.drawParticles(),requestAnimationFrame(()=>this.animate())}updateParticles(){this.particles.forEach(t=>{t.x+=t.vx,t.y+=t.vy,(t.x<0||t.x>this.width)&&(t.vx=-t.vx),(t.y<0||t.y>this.height)&&(t.vy=-t.vy)})}drawParticles(){this.particles.forEach(t=>{this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.size,0,2*Math.PI,!1),this.ctx.fillStyle=this.options.color,this.ctx.globalAlpha=this.options.opacity,this.ctx.fill()}),this.drawLinks()}drawLinks(){for(let t=0;t<this.particles.length;t++)for(let i=t+1;i<this.particles.length;i++){const s=this.particles[t],e=this.particles[i],n=Math.sqrt(Math.pow(e.x-s.x,2)+Math.pow(e.y-s.y,2));if(n<this.options.linkDistance){const t=1-n/this.options.linkDistance;this.ctx.beginPath(),this.ctx.moveTo(s.x,s.y),this.ctx.lineTo(e.x,e.y),this.ctx.strokeStyle=this.options.linkColor,this.ctx.globalAlpha=t*this.options.linkOpacity,this.ctx.stroke()}}}}
